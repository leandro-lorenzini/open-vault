import { useEffect, useState } from 'react';
import { Button, Divider, Form, Input, Select, Tooltip, Typography, notification } from 'antd';
import { CopyOutlined } from '@ant-design/icons';
import copy from 'copy-to-clipboard';
import Api from '../../services/api';

export default function AuthenticationView() {
	const [sso, setSso] = useState(false);
	const [processing, setProcessing] = useState(false);	
	const [organization, setOrganization] = useState();

	const serverAddress = localStorage.getItem('serverAddress') ?
		localStorage.getItem('serverAddress') : process.env.REACT_APP_SERVER_URL;

	useEffect(() => {
		Api.organization.get().then(org => {
			setOrganization(org);
			setSso(org.sso?.enabled);
			console.log(org);
		}).catch(error => {
			console.log(error);
		});
	}, []);

	const [notificationApi, notificationHolder] = notification.useNotification();

	const openNotification = (type, message, description) => {
		// eslint-disable-next-line security/detect-object-injection
		notificationApi[type]({
			message: message,
			description: description,
		});
	};

	function submit(form) {
		setProcessing(true);
		Api.organization.sso.set_sso(sso, form.issuer, form.entryPoint, form.certificate, form.responseSigned, form.assertionSigned).then((() => {
			openNotification('success', 'Operation Successful', 'The authentication settings have been saved successfully.');
		})).catch(error => {
			openNotification('error', 'Operation Error', error?.message ? error.message:'A techinical error has happened');
			console.log(error);
		}).finally(() => {
			setProcessing(false);
		});
	}
    
	if(!organization) {
		return <></>;
	}
	
	return <div  style={{ height: '100%', overflow: 'auto' }}>
		{notificationHolder}
		<div className='center' style={{paddingTop: 20}} >
			<div className='scrollable'>
				<Typography.Title level={3}>Authentication</Typography.Title>
				<Divider style={{ marginTop: 0, marginBottom: 15}}/>
				<Form layout='vertical'>
					<Typography.Title level={5}>Authentication configuration</Typography.Title>
					<Form.Item name='sso' label="Authenitcation method" style={{ marginBottom: 10 }}>
						<Select defaultValue={organization.sso?.enabled}
							options={[
								{ value: false, label: 'Local authentication'},
								{ value: true, label: 'SSO authentication'}
							]}
							onChange={setSso}/>
					</Form.Item>
				</Form>
				<Form layout='vertical' onFinish={submit}>
					<Typography.Title level={5}>SSO Configuration</Typography.Title>
					<Form.Item
						required
						name='issuer'
						initialValue={organization.sso?.issuer}
						style={{ marginBottom: 35 }}
						label='Issuer' 
						help="Also know as Entity ID, this value should match with the one configured on the identity provider.">
						<Input placeholder='Issuer' required disabled={!sso}></Input>
					</Form.Item>
					<Form.Item
						required
						style={{ marginBottom: 35 }}
						label='Audience' 
						help="Also know as Service Provider ID, this value should match with the one configured on the identity provider.">
						<Input disabled={!sso} readOnly value="open-vault" suffix={<Tooltip title="Copy to clipboard">
							<CopyOutlined
								onClick={() => copy('open-vault')}
							/>
						</Tooltip>}/>
					</Form.Item>
					<Form.Item 
						required
						name='entryPoint'
						initialValue={organization.sso?.entryPoint}
						style={{ marginBottom: 30 }}
						label='Entry Point' 
						help="This value is also know as IDP URL.">
						<Input placeholder='Entry Point' required disabled={!sso}></Input>
					</Form.Item>
					<Form.Item 
						required
						name='certificate'
						initialValue={organization.sso?.certificate}
						style={{ marginBottom: 35 }}
						label='Certificate' 
						help="The certificate is generated by the Identity provider.">
						<Input.TextArea disabled={!sso}></Input.TextArea>
					</Form.Item>

					<Form.Item 
						required name='responseSigned' 
						label="Response Signed" 
						style={{ marginBottom: 20 }} 
						initialValue={organization.sso?.responseSigned}>
						<Select disabled={!sso} defaultValue={organization.sso?.responseSigned}
							options={[
								{ value: false, label: 'No'},
								{ value: true, label: 'Yes'}
							]}/>
					</Form.Item>

					<Form.Item 
						required 
						name='assertionSigned' 
						label="Assertion Signed" 
						style={{ marginBottom: 20 }} 
						initialValue={organization.sso?.assertionSigned}>
						<Select disabled={!sso} defaultValue={organization.sso?.assertionSigned}
							options={[
								{ value: false, label: 'No'},
								{ value: true, label: 'Yes'}
							]}/>
					</Form.Item>

					<Form.Item 
						required
						name='callback'
						initialValue={`${serverAddress}/auth/sso/callback/${organization.id}`}
						style={{ marginBottom: 50 }}
						label='Callback URL' 
						help="This value is also kown as ACS URL. Make sure that the SAML reply contains the 'name' and 'email' attributes">
						<Input readOnly disabled={!sso} suffix={<Tooltip title="Copy to clipboard">
							<CopyOutlined
								onClick={() => copy(`${serverAddress}/auth/sso/callback/${organization.id}`)}
							/>
						</Tooltip>}/>
					</Form.Item>
					<Form.Item>
						<Button loading={processing} htmlType='submit' type='default'>Save</Button>
					</Form.Item>
				</Form>
			</div>
		</div>
	</div>;
}